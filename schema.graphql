type Account @entity {
  id: Bytes!
  address: Bytes!
  transfersIn: [Transfer!]! @derivedFrom(field: "to")
  transfersOut: [Transfer!]! @derivedFrom(field: "from")
  cysFLRBalance: BigInt!
  cyWETHBalance: BigInt!
  totalCyBalance: BigInt! # Sum of both token balances
  eligibleShare: BigDecimal! # Percentage of total eligible supply (if positive balance)
  cysFLRReceiptBalance: [CysFlrReceiptOwnerBalance!]! @derivedFrom(field: "owner")
  cyWETHReceiptBalance: [CyWethReceiptOwnerBalance!]! @derivedFrom(field: "owner")
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  tokenAddress: Bytes!
  from: Account!
  fromIsApprovedSource: Boolean!
  to: Account!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EligibleTotals @entity {
  id: String!
  totalEligibleCysFLR: BigInt!
  totalEligibleCyWETH: BigInt!
  totalEligibleSum: BigInt!
}

# interface for receipt owner balance entities that each cy receipts will implement
# this allows us to do `derivedFrom` on the Account entity for all receipt types
interface ReceiptOwnerBalance {
  id: Bytes! # composite of receiptAddress + tokenId + owner
  receiptAddress: Bytes!
  tokenId: BigInt!
  owner: Account!
  balance: BigInt!
}

type CysFlrReceiptOwnerBalance implements ReceiptOwnerBalance @entity {
  id: Bytes!
  receiptAddress: Bytes!
  tokenId: BigInt!
  owner: Account!
  balance: BigInt!
}

type CyWethReceiptOwnerBalance implements ReceiptOwnerBalance @entity {
  id: Bytes!
  receiptAddress: Bytes!
  tokenId: BigInt!
  owner: Account!
  balance: BigInt!
}
